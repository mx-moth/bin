#!/usr/local/bin/v8cgi

include('/home/tim/Personal/programs/javascript/common/mootools-core-1.3-object.js');

if (system.args.length < 2) {
	system.stdout("Usage: " + system.args[0] + " filename");
	exit(1);
}

var f = new File(system.args[1]);
if (!f.exists()) {
	system.stdout("file " + f + " does not exist!");
}
if (!f.open('r')) {
	system.stdout("Could not open " + f + " for reading");
}
var dataString = f.read();
var data = JSON.parse(dataString);

var printVar = function(data, options) {
	options = Object.merge({
		full: false,
		printer: system.stdout.bind(system),
		indentString: "\t",
		indent: 0,
		formatter: null, 
	}, options);

	var full = options.full;
	var printer = options.printer;
	var indentString = options.indentString;
	var indent = options.indent;

	var formatter = function(type, val) {
		switch(type) {
			case 'graphic': 
				if (['{', '[', ']', '}', '..'].indexOf(val) !== -1) {
					return '[35m' + val + '[0m'; break;
				}
				break;
			case 'key': return '[33m' + val + '[0m'; break;
			case 'val':
				if (val.length > 100 && !full) {
					return formatter('val', val.substring(0, 48)) + formatter('graphic', '"') + ' ' + formatter('graphic', '..') + ' ' + formatter('graphic', '"') + formatter('val', val.substring(val.length - 48));
				} else {
					return '[1m' + val + '[0m';
				}

			case 'undefined': 
			case 'null':
				return '[32m' + val + '[32m';

			case 'indent': break;
		}
		return val;
	};
	formatter = options.formatter == null ? formatter : options.formatter || function(_, val) { return val; };

	var indenter = function(num) {
		var string = [];
		for (var i = 0; i < num; i++) {
			string.push(indentString);
		};
		return formatter('indent', string.join(''));
	}

	var printVal = function(val) {
		var first = true;
		var type = typeof(val);
		if (type == 'undefined') {
			
			printer(formatter('undefined', 'undefined'));

		} else if (val === null) {

			printer(formatter('null', 'null'));

		} else if (val instanceof Array) {

			printer(formatter('graphic', '['));

			indent++;
			Object.each(val, function(oVal, oKey) {
				!first && printer(formatter('graphic', ','));
				first = false;
				printer("\n" + indenter(indent) + formatter('key', oKey) + formatter('graphic', ':') + ' ');
				printVal(oVal)
			});
			indent--;

			!first && printer("\n" + indenter(indent));
			printer(formatter('graphic', ']'));

		} else if (type == 'object') {

			printer(formatter('graphic', '{'));

			indent++;
			for (var key in val) {
				!first && printer(formatter('graphic', ','));
				first = false;
				printer("\n" + indenter(indent) + formatter('graphic', '"') + formatter('key', key) + formatter('graphic', '"') + formatter('graphic', ':') + ' ');
				printVal(val[key]);
			}
			indent--;

			!first && printer("\n" + indenter(indent));
			printer(formatter('graphic', '}'));

		} else if (type == 'number') {

			printer(formatter('val', val.toString()));

		} else if (type == 'string') {

			printer(formatter('graphic', '"') + formatter('val', JSON.stringify(val).replace(/^"|"$/g, '')) + formatter('graphic', '"'));

		} else {

			printer(formatter('graphic', '"') + formatter('val', val.toString()) + formatter('graphic', '"'));

		}
	}

	printer(indenter(indent));
	printVal(data, options);

};

printVar(data);
